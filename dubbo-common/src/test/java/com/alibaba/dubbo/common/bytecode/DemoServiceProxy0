package com.alibaba.dubbo.common.bytecode;

import com.alibaba.dubbo.common.bytecode.ClassGenerator;
import com.alibaba.dubbo.demo.DemoService;
import com.alibaba.dubbo.rpc.service.EchoService;
import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;

public class proxy0
implements ClassGenerator.DC,
EchoService,
DemoService {
    // 方法数组
    public static Method[] methods;
    private InvocationHandler handler;

    public proxy0(InvocationHandler invocationHandler) {
        this.handler = invocationHandler;
    }

    public proxy0() {
    }


    /**
     * 消费者调用服务的过程：
     * proxy0#sayHello(String)
     *   —> InvokerInvocationHandler#invoke(Object, Method, Object[])
     *     —> MockClusterInvoker#invoke(Invocation)
     *       —> AbstractClusterInvoker#invoke(Invocation)
     *         —> FailoverClusterInvoker#doInvoke(Invocation, List<Invoker<T>>, LoadBalance)
     *           —> Filter#invoke(Invoker, Invocation)  // 包含多个 Filter 调用
     *             —> ListenerInvokerWrapper#invoke(Invocation)
     *               —> AbstractInvoker#invoke(Invocation)
     *                 —> DubboInvoker#doInvoke(Invocation)
     *                   —> ReferenceCountExchangeClient#request(Object, int)
     *                     —> HeaderExchangeClient#request(Object, int)
     *                       —> HeaderExchangeChannel#request(Object, int)
     *                         —> AbstractPeer#send(Object)
     *                           —> AbstractClient#send(Object, boolean)
     *                             —> NettyChannel#send(Object, boolean)
     *                               —> NioClientSocketChannel#write(Object)
     */

    /**
     * 提供者执行服务的过程：
     * ChannelEventRunnable#run()
     *   —> DecodeHandler#received(Channel, Object)
     *     —> HeaderExchangeHandler#received(Channel, Object)
     *       —> HeaderExchangeHandler#handleRequest(ExchangeChannel, Request)
     *         —> DubboProtocol.requestHandler#reply(ExchangeChannel, Object)
     *           —> Filter#invoke(Invoker, Invocation)
     *             —> AbstractProxyInvoker#invoke(Invocation)
     *               —> Wrapper0#invokeMethod(Object, String, Class[], Object[])
     */                 —> DemoServiceImpl#sayHello(String)

    public String sayHello(String string) {
        // 将参数存储到 Object 数组中
        Object[] arrobject = new Object[]{string};
        // 调用 InvocationHandler 实现类的 invoke 方法得到调用结果
        Object object = this.handler.invoke(this, methods[0], arrobject);
        // 返回调用结果
        return (String)object;
    }

    /** 回声测试方法 */
    public Object $echo(Object object) {
        Object[] arrobject = new Object[]{object};
        Object object2 = this.handler.invoke(this, methods[1], arrobject);
        return object2;
    }
}
